

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Administrator
 */

import ciphers.*;

import java.util.*;
import java.io.*;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.stream.events.StartElement;


public class frm_ui extends javax.swing.JFrame {
    private AutokeyLong1242 akc;
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frm_ui.class.getName());

    /**
     * Creates new form frm_ui;
     */

    public frm_ui() {
        initComponents();
        akc = new AutokeyLong1242();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    
    
    
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Box1 = new javax.swing.JComboBox<>();
        CSE = new javax.swing.JLabel();
        LuaChon = new javax.swing.JLabel();
        plaintextLabel = new javax.swing.JLabel();
        keyLabel = new javax.swing.JLabel();
        ciphertextLabel = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txt_plaintext = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        txt_key = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        txt_ciphertext = new javax.swing.JTextArea();
        encyptBtn = new javax.swing.JButton();
        decryptBtn = new javax.swing.JButton();
        opencipherBtn = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txt_keymatrix = new javax.swing.JTextArea();
        lblKeyMatrix = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        Box1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Ceasar Cipher", "Vigen√®re Cipher", "Railfence Cipher", "Playfair Cipher", "Transposition Cipher", "AutoKey Cipher" }));
        Box1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Box1ActionPerformed(evt);
            }
        });

        CSE.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        CSE.setText("Classical Symmetric Encryption");

        LuaChon.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        LuaChon.setText("Choice:");

        plaintextLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        plaintextLabel.setText("Plaintext:");

        keyLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        keyLabel.setText("Key:");

        ciphertextLabel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        ciphertextLabel.setText("Ciphertext:");

        txt_plaintext.setColumns(20);
        txt_plaintext.setRows(5);
        jScrollPane1.setViewportView(txt_plaintext);

        txt_key.setColumns(20);
        txt_key.setRows(5);
        jScrollPane2.setViewportView(txt_key);

        txt_ciphertext.setColumns(20);
        txt_ciphertext.setRows(5);
        jScrollPane3.setViewportView(txt_ciphertext);

        lblKeyMatrix.setVisible(false);
        jScrollPane4.setVisible(false);

        encyptBtn.setText("Encypt");
        encyptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encyptBtnActionPerformed(evt);
            }
        });

        decryptBtn.setText("Decrypt");
        decryptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decryptBtnActionPerformed(evt);
            }
        });

        opencipherBtn.setText("Open Ciphertext File");
        opencipherBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                opencipherBtnActionPerformed(evt);
            }
        });

        txt_keymatrix.setColumns(20);
        txt_keymatrix.setRows(5);
        jScrollPane4.setViewportView(txt_keymatrix);

        lblKeyMatrix.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblKeyMatrix.setText("Key Matrix:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(keyLabel)
                            .addComponent(ciphertextLabel))
                        .addGap(19, 19, 19)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(encyptBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(decryptBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(opencipherBtn)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(LuaChon)
                                    .addComponent(plaintextLabel))
                                .addGap(29, 29, 29))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(lblKeyMatrix)
                                .addGap(18, 18, 18)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane4)
                            .addComponent(CSE)
                            .addComponent(jScrollPane1)
                            .addComponent(Box1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 389, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(73, 73, 73))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(37, 37, 37)
                .addComponent(CSE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Box1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(LuaChon))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(plaintextLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(keyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblKeyMatrix))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ciphertextLabel)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(encyptBtn)
                            .addComponent(decryptBtn)
                            .addComponent(opencipherBtn))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // H√†m m√£ h√≥a Caesar
    public void CaesarEncrypt(java.awt.event.ActionEvent evt) {
        try {
            String plaintext = txt_plaintext.getText();
            int key = Integer.parseInt(txt_key.getText());
            String ciphertext = CaesarLong1242.encrypt(plaintext, key);
            JOptionPane.showMessageDialog(this, "Encryption successful!");
            txt_ciphertext.setText(ciphertext);
            // saveToFile(ciphertext);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid key. Please enter a valid integer.");
        }
    }

    // H√†m m√£ h√≥a Vigen√®re
    public void VigenereEncrypt(java.awt.event.ActionEvent evt) {
        String plaintext = txt_plaintext.getText();
        String key = txt_key.getText();
        String ciphertext = VigenereLong1242.encrypt(plaintext, key);
        JOptionPane.showMessageDialog(this, "Encrypted successfully!");
        txt_ciphertext.setText(ciphertext);
        // saveToFile(ciphertext);
    }
    // H√†m m√£ h√≥a Rail Fence
    public void RailFenceEncrypt(java.awt.event.ActionEvent evt) {
        try {
            String plaintext = txt_plaintext.getText();
            int key = Integer.parseInt(txt_key.getText());
            String ciphertext = RailFanceLong1242.encrypt(plaintext, key);
            JOptionPane.showMessageDialog(this, "Encryption successful!");
            txt_ciphertext.setText(ciphertext);
            // saveToFile(ciphertext);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid key. Please enter a valid integer.");
        }
    }

    // H√†m m√£ h√≥a Playfair
    public void PlayfairEncrypt(java.awt.event.ActionEvent evt) {
        String plaintext = txt_plaintext.getText();
        String key = txt_key.getText();

        if (!plaintext.isEmpty() && !key.isEmpty()) {
            PlayFairLong1242 playFairCipher = new PlayFairLong1242(key);
            String ciphertext = playFairCipher.encrypt(plaintext);
            JOptionPane.showMessageDialog(this, "Encryption successful!");
            txt_ciphertext.setText(ciphertext);
            // saveToFile(ciphertext);

            // xu·∫•t key matrix
            String keyMatrixStr = playFairCipher.getKeyMatrixString();
            txt_keymatrix.setText(keyMatrixStr);

        } else {
            JOptionPane.showMessageDialog(this, "Please enter both plaintext and key.");
        }
    }
    // H√†m m√£ h√≥a Transposition
    public void TranspositionEncrypt(java.awt.event.ActionEvent evt) {
        String plaintext = txt_plaintext.getText();
        String keyText = txt_key.getText();

        if (!plaintext.isEmpty() && !keyText.isEmpty()) { 
            int[] key = Arrays.stream(keyText.split(",")).mapToInt(Integer::parseInt).toArray();
            TranspositionLong1242 cipher = new TranspositionLong1242();
            String ciphertext = cipher.encrypt(plaintext, key);
            JOptionPane.showMessageDialog(this, "Encryption successful!");
            txt_ciphertext.setText(ciphertext);
            // saveToFile(ciphertext);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both plaintext and key.");
        }
    }
    // H√†m m√£ h√≥a AutoKey
    public void AutoKeyEncrypt(java.awt.event.ActionEvent evt) {
        String plaintext = txt_plaintext.getText();
        String keyText = txt_key.getText();

        if (!plaintext.isEmpty() && !keyText.isEmpty()) { 
            String ciphertext = akc.encrypt(plaintext, keyText);
            JOptionPane.showMessageDialog(this, "Encryption successful!");
            txt_ciphertext.setText(ciphertext);
            // saveToFile(ciphertext);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both plaintext and key.");
        }
    } 


    // Gi·∫£i m√£ Decrypt Caesar
    public void CaesarDecrypt(java.awt.event.ActionEvent evt) {
        try {
            String ciphertext = txt_ciphertext.getText();
            int key = Integer.parseInt(txt_key.getText());
            String plaintext = CaesarLong1242.decrypt(ciphertext, key);
            JOptionPane.showMessageDialog(this, "Decryption successful!");
            txt_plaintext.setText(plaintext);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid key. Please enter a valid integer.");
        }
    }

    // Gi·∫£i m√£ Decrypt Vigen√®re
    public void VigenereDecrypt(java.awt.event.ActionEvent evt) {
        String ciphertext = txt_ciphertext.getText();
        String key = txt_key.getText();
        String plaintext = VigenereLong1242.decrypt(ciphertext, key);
        JOptionPane.showMessageDialog(this, "Decrypted successfully!");
        txt_plaintext.setText(plaintext);
    }

    // Gi·∫£i m√£ Decrypt Rail Fence
    public void RailFenceDecrypt(java.awt.event.ActionEvent evt) {
        try {
            String ciphertext = txt_ciphertext.getText();
            int key = Integer.parseInt(txt_key.getText());
            String plaintext = RailFanceLong1242.decrypt(ciphertext, key);
            JOptionPane.showMessageDialog(this, "Decryption successful!");
            txt_plaintext.setText(plaintext);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(this, "Invalid key. Please enter a valid integer.");
        }
    }

    // Gi·∫£i m√£ Decrypt Playfair
    public void PlayfairDecrypt(java.awt.event.ActionEvent evt) {
        String ciphertext = txt_ciphertext.getText();
        String key = txt_key.getText();
        

        if (!ciphertext.isEmpty() && !key.isEmpty()) {
            PlayFairLong1242 playFairCipher = new PlayFairLong1242(key);
            String decryptedText = playFairCipher.decrypt(ciphertext);
            JOptionPane.showMessageDialog(this, "Decryption successful!");
            txt_plaintext.setText(decryptedText);     

            
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both ciphertext and key.");
        }
    }

    // Gi·∫£i m√£ Decrypt Transposition
    public void TranspositionDecrypt(java.awt.event.ActionEvent evt) {
        String ciphertext = txt_ciphertext.getText();
        String keyText = txt_key.getText();

        if (!ciphertext.isEmpty() && !keyText.isEmpty()) { 
            int[] key = Arrays.stream(keyText.split(","))
                                .mapToInt(Integer::parseInt)
                                .toArray();
            TranspositionLong1242 cipher = new TranspositionLong1242();
            String plaintext = cipher.decrypt(ciphertext, key);
            JOptionPane.showMessageDialog(this, "Decryption successful!");
            txt_plaintext.setText(plaintext);
            // saveToFile(plaintext);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both ciphertext and key.");
        }
    }

    // Gi·∫£i m√£ Decrypt AutoKey
    public void AutoKeyDecrypt(java.awt.event.ActionEvent evt) {
        String ciphertext = txt_ciphertext.getText();
        String keyText = txt_key.getText();

        if (!ciphertext.isEmpty() && !keyText.isEmpty()) { 
            String plaintext = akc.decrypt(ciphertext, keyText);
            JOptionPane.showMessageDialog(this, "Decryption successful!");
            txt_plaintext.setText(plaintext);
        } else {
            JOptionPane.showMessageDialog(this, "Please enter both ciphertext and key.");
        }
    }    
      
    private void encyptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encyptBtnActionPerformed
       // L·∫•y l·ª±a ch·ªçn t·ª´ ComboBox
        String selectedCipher = (String) Box1.getSelectedItem();
        switch (selectedCipher) {
            case "Ceasar Cipher":
                CaesarEncrypt(evt);
                break;
            case "Vigen√®re Cipher":
                VigenereEncrypt(evt);
                break;
            case "Railfence Cipher":
                RailFenceEncrypt(evt);
                break;
            case "Playfair Cipher":
                PlayfairEncrypt(evt);
                break;
            case "Transposition Cipher":
                TranspositionEncrypt(evt);
                break;
            case "AutoKey Cipher":
                AutoKeyEncrypt(evt);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select a cipher method.");
                break;
        }
    }//GEN-LAST:event_encyptBtnActionPerformed

    private void Box1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Box1ActionPerformed
        // Hi·ªán txt_keymatrix khi ch·ªçn Playfair Cipher
        String selectedCipher = (String) Box1.getSelectedItem();
        if ("Playfair Cipher".equals(selectedCipher)) {
            lblKeyMatrix.setVisible(true);
            jScrollPane4.setVisible(true);
        } else {
            lblKeyMatrix.setVisible(false);
            jScrollPane4.setVisible(false);
        }

    }//GEN-LAST:event_Box1ActionPerformed

    private void decryptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decryptBtnActionPerformed
        // L·∫•y l·ª±a ch·ªçn t·ª´ ComboBox
        String selectedCipher = (String) Box1.getSelectedItem();
        switch (selectedCipher) {
            case "Ceasar Cipher":
                CaesarDecrypt(evt);
                break;
            case "Vigen√®re Cipher":
                VigenereDecrypt(evt);
                break;
            case "Railfence Cipher":
                RailFenceDecrypt(evt);
                break;
            case "Playfair Cipher":
                PlayfairDecrypt(evt);
                break;
            case "Transposition Cipher":
                TranspositionDecrypt(evt);
                break;
            case "AutoKey Cipher":
                AutoKeyDecrypt(evt);
                break;
            default:
                JOptionPane.showMessageDialog(this, "Please select a cipher method.");
                break;
        }
        //  --- IGNORE ---
    }//GEN-LAST:event_decryptBtnActionPerformed

    private void opencipherBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_opencipherBtnActionPerformed
        // M·ªü file ciphertext
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Open Ciphertext File");
        fileChooser.setFileFilter(new FileNameExtensionFilter("Text Files", "txt"));
        int userSelection = fileChooser.showOpenDialog(this);
        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToOpen = fileChooser.getSelectedFile();
            try (BufferedReader br = new BufferedReader(new FileReader(fileToOpen))) {
                StringBuilder content = new StringBuilder();
                String line;
                while ((line = br.readLine()) != null) {
                    content.append(line).append("\n");
                }
                txt_ciphertext.setText(content.toString().trim());
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error reading file: " + e.getMessage());
            }
        }
    }//GEN-LAST:event_opencipherBtnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new frm_ui().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> Box1;
    private javax.swing.JLabel CSE;
    private javax.swing.JLabel LuaChon;
    private javax.swing.JLabel ciphertextLabel;
    private javax.swing.JButton decryptBtn;
    private javax.swing.JButton encyptBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JLabel keyLabel;
    private javax.swing.JLabel lblKeyMatrix;
    private javax.swing.JButton opencipherBtn;
    private javax.swing.JLabel plaintextLabel;
    private javax.swing.JTextArea txt_ciphertext;
    private javax.swing.JTextArea txt_key;
    private javax.swing.JTextArea txt_keymatrix;
    private javax.swing.JTextArea txt_plaintext;
    // End of variables declaration//GEN-END:variables
}
